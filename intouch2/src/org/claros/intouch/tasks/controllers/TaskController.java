package org.claros.intouch.tasks.controllers;

import java.util.List;

import org.claros.commons.exception.NoPermissionException;
import org.claros.intouch.common.utility.Constants;
import org.claros.intouch.common.utility.Utility;
import org.claros.intouch.tasks.models.Task;

import com.jenkov.mrpersister.impl.mapping.AutoGeneratedColumnsMapper;
import com.jenkov.mrpersister.itf.IGenericDao;
import com.jenkov.mrpersister.itf.mapping.IObjectMappingKey;
import com.jenkov.mrpersister.util.JdbcUtil;

public class TaskController {

	/**
	 * 
	 * @param username
	 * @return
	 * @throws Exception
	 */
	public static List<Task> getTasks(String username) throws Exception {
		IGenericDao dao = null;
		List res = null;
		try {
			dao = Utility.getDbConnection();
			
			String sql = "SELECT * FROM TASKS WHERE USERNAME=? ORDER BY PRIORITY DESC";

			res = dao.readList(Task.class, sql, new Object[] {username});
		} finally {
			JdbcUtil.close(dao);
			dao = null;
		}
		return res;
	}

	/**
	 * 
	 * @param username
	 * @param id
	 * @return
	 * @throws Exception
	 */
	public static Task getTaskById(String username, Long id) throws Exception {
		IGenericDao dao = null;
		Task res = null;
		try {
			dao = Utility.getDbConnection();
			String sql = "SELECT * FROM TASKS WHERE USERNAME=? AND ID = ?";
			res = (Task)dao.read(Task.class, sql, new Object[] {username, id});
		} finally {
			JdbcUtil.close(dao);
			dao = null;
		}
		return res;
	}

	/**
	 * 
	 * @param username
	 * @param task
	 * @throws Exception
	 */
	@SuppressWarnings("deprecation")
	public static void saveTask(String username, Task task) throws Exception {
		IGenericDao dao = null;
		try {
			dao = Utility.getDbConnection();
			
			Long id = task.getId();
			if (id == null) {
				// it is an insert
				IObjectMappingKey myObj = Constants.persistMan.getObjectMappingFactory().createInstance(Task.class, new AutoGeneratedColumnsMapper(true));
				dao.insert(myObj, task);
			} else {
				// it is an update
				Task tmp = getTaskById(username, task.getId());
				if (tmp == null) {
					// there is no such task for this user. 
					throw new NoPermissionException();
				}
				dao.update(task);
			}
		} finally {
			JdbcUtil.close(dao);
			dao = null;
		}
	}

	/**
	 * 
	 * @param username
	 * @param id
	 * @throws Exception
	 */
	public static void deleteTask(String username, Long id) throws Exception {
		Task tmp = getTaskById(username, id);
		if (tmp == null || !username.equals(tmp.getUsername())) {
			// there is no such task for this user
			throw new NoPermissionException();
		}

		IGenericDao dao = null;
		try {
			dao = Utility.getDbConnection();
			dao.deleteByPrimaryKey(Task.class, id);
		} catch (Exception e) {
			// do nothing sier
		} finally {
			JdbcUtil.close(dao);
			dao = null;
		}
	}
}
