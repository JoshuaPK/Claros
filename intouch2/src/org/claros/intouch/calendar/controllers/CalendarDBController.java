package org.claros.intouch.calendar.controllers;

import java.util.List;

import org.claros.commons.auth.models.AuthProfile;
import org.claros.commons.exception.NoPermissionException;
import org.claros.intouch.calendar.models.CalendarObject;
import org.claros.intouch.common.utility.Constants;
import org.claros.intouch.common.utility.Utility;

import com.jenkov.mrpersister.impl.mapping.AutoGeneratedColumnsMapper;
import com.jenkov.mrpersister.itf.IGenericDao;
import com.jenkov.mrpersister.itf.mapping.IObjectMappingKey;
import com.jenkov.mrpersister.util.JdbcUtil;

/**
 * @author Umut Gokbayrak
 */
public class CalendarDBController {
	
	public static List getCalendarObjectsByUser(AuthProfile auth, boolean getAll) throws Exception {
		IGenericDao dao = null;
		List items = null;
		try {
			dao = Utility.getDbConnection();
			
			String sql = null;
			if (getAll) {
				sql = "SELECT * FROM CALENDAR_OBJECTS";
				items = dao.readList(CalendarObject.class, sql, new Object[] {});
			} else {
				String username = auth.getUsername();
				sql = "SELECT * FROM CALENDAR_OBJECTS WHERE USERNAME=? ORDER BY ID DESC";
				items = dao.readList(CalendarObject.class, sql, new Object[] {username});
			}
		} finally {
			JdbcUtil.close(dao);
			dao = null;
		}
		return items;
	}

	/**
	 * @param auth
	 * @param item
	 */
	@SuppressWarnings("deprecation")
	public static void saveEvent(AuthProfile auth, CalendarObject item) throws Exception {
		IGenericDao dao = null;
		try {
			dao = Utility.getDbConnection();
			
			Long id = item.getId();
			if (id == null) {
				// it is an insert
				IObjectMappingKey myObj = Constants.persistMan.getObjectMappingFactory().createInstance(CalendarObject.class, new AutoGeneratedColumnsMapper(true));
				dao.insert(myObj, item);
			} else {
				// it is an update
				String username = auth.getUsername();
				if (!item.getUsername().equals(username)) {
					throw new NoPermissionException();
				}
				dao.update(CalendarObject.class, item);
			}
		} finally {
			JdbcUtil.close(dao);
			dao = null;
		}
	}

	/**
	 * 
	 * @param auth
	 * @param eventId
	 * @throws Exception
	 */
	public static void deleteEvent(AuthProfile auth, Long eventId) throws Exception {
		CalendarObject tmp = getEventById(auth, eventId);
		if (!tmp.getUsername().equals(auth.getUsername())) {
			throw new NoPermissionException();
		}

		IGenericDao dao = null;
		try {
			dao = Utility.getDbConnection();
			dao.deleteByPrimaryKey(CalendarObject.class, eventId);
		} catch (Exception e) {
			// do nothing sier
		} finally {
			JdbcUtil.close(dao);
			dao = null;
		}
	}

	/**
	 * 
	 * @param auth
	 * @param eventId
	 * @return
	 * @throws Exception
	 */
	public static CalendarObject getEventById(AuthProfile auth, Long eventId) throws Exception {
		IGenericDao dao = null;
		CalendarObject event = null;
		try {
			dao = Utility.getDbConnection();
			String username = auth.getUsername();
			
			String sql = "SELECT * FROM CALENDAR_OBJECTS WHERE USERNAME=? AND ID = ?";
			event = (CalendarObject)dao.read(CalendarObject.class, sql, new Object[] {username, eventId});
		} finally {
			JdbcUtil.close(dao);
			dao = null;
		}
		return event;
	}

}
